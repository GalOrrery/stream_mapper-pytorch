[project]
  name = "stream_ml.pytorch"
  version = "0.1.0"
  description = "Stream ML pytorch extension."
  readme = "README.rst"
  requires-python = ">=3.8"
  license = {file = "LICENSE"}
  keywords = ["numpy", "interoperability"]
  authors = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"},
    {name = "Jacob Nibauer", email = "jnibauer@princetoon.edu"}
  ]
  maintainers = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"},
    {name = "Jacob Nibauer", email = "jnibauer@princetoon.edu"}
  ]
  classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
  ]
  dependencies = [
    "stream_ml.core @ git+https://github.com/nstarman/stream_ml-core.git",
    "torch>=1.13",
    "nflows",
  ]

[project.optional-dependencies]
  all = [
    "tqdm",
  ]
  test = [
    "coverage[toml]",
    "numpy>=1.18",
    "pytest",
    "pytest-astropy",
    "typing_extensions>=4.4",
  ]
  docs = [
    "graphviz",
    "IPython",
    "jupyter_client",
    "nbsphinx",
    "pydata-sphinx-theme",
    "sphinx",
    "sphinx-astropy",
    "sphinxcontrib.bibtex < 2.0.0",
    "tomlkit",
  ]

[project.urls]
  homepage = "https://github.com/nstarman/stream_ml-pytorch"
  repository = "https://github.com/nstarman/stream_ml-pytorch"
  documentation = "https://github.com/nstarman/stream_ml-pytorch"


[build-system]
  requires = [
    "mypy>=0.971",
    "numpy>=1.21",
    "setuptools>=45.0",
    "setuptools_scm[toml]>=6.3.1",
    "wheel",
  ]

  build-backend = 'setuptools.build_meta'


[tool.setuptools]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["py.typed"]


[tool.coverage.run]
  omit = [
    "tests/*",
    "*setup_package*",
  ]

[tool.coverage.report]
  exclude_lines = [
    # Have to re-enable the standard pragma
    # and branches that don't pertain to this version of Python
    "pragma: no cover",
    "pragma: py{ignore_python_version}",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    '@(abc\.)?abstractmethod',
    # Exclude type check blocks and Protocol contents, they aren't run:
    "if TYPE_CHECKING:",
    '\.\.\.',
    # Don't complain about IPython completion helper
    "def _ipython_key_completions_",
  ]


[tool.mypy]
  python_version = "3.10"

  namespace_packages = true
  explicit_package_bases = true
  mypy_path = "$MYPY_CONFIG_FILE_DIR/src"

  strict = true
  disallow_subclassing_any = false
  disallow_untyped_defs = true
  no_implicit_optional = true
  warn_return_any = true
  warn_redundant_casts = true
  warn_unused_configs = true
  warn_unreachable = true
  exclude = '''(^|/)tests/'''
  plugins = ["numpy.typing.mypy_plugin",]

  [[tool.mypy.overrides]]
    module = "*/tests/*"
    ignore_errors = true

  [[tool.mypy.overrides]]
    module = "tests/*"
    ignore_errors = true


[tool.ruff]
target-version = "py310"
line-length = 88
select = ["ALL"]
ignore = [
  "ANN101", "ANN102", "ANN401",
  "ARG001", "ARG002",
  "D105", "D107", "D203", "D213",
  "FBT003",
  "PD",
  "RET505", "RET506", "RET507",

  # flake8-commas (COM)
  "COM812",  # TrailingCommaMissing
  "COM818",  # TrailingCommaOnBareTupleProhibited
  "COM819",  # TrailingCommaProhibited
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
force-sort-within-sections = true
known-first-party = ["stream_ml"]
known-third-party = ["numpy", "pytest", "torch", "flax", "jax"]
